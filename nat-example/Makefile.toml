[tasks.client]
command = "cargo"
args = ["run", "--bin", "desk-client", "--features", "native,bevy/dynamic"]

[tasks.server]
command = "cargo"
args = ["run", "--bin", "desk-server"]

[tasks.manifest]
command = "cargo"
args = ["run", "--example", "manifest"]

[tasks.build-wasm]
command = "cargo"
args = ["build", "--bin", "desk-client", "--target", "wasm32-unknown-unknown", "--release"]

[tasks.wasm-bindgen]
command = "wasm-bindgen"
args = ["--out-dir", "pkg", "--target", "web", "target/wasm32-unknown-unknown/release/desk-client.wasm"]
dependencies = ["build-wasm"]

[tasks.webpack]
command = "npm"
args = ["run", "build"]
dependencies = ["wasm-bindgen"]

[tasks.wasm-serve]
command = "nohup"
args = ["basic-http-server", "public","-a","127.0.0.1:4001"]
dependencies = ["webpack"]

[tasks.check]
command = "cargo"
args = ["check", "--workspace"]

[tasks.check-native]
command = "cargo"
args = ["check", "-p", "desk-client", "--features", "native"]

[tasks.check-wasm]
command = "cargo"
args = ["check", "-p", "desk-client", "--target", "wasm32-unknown-unknown", "--features", "web"]

[tasks.test]
command = "cargo"
args = ["test", "--all-features"]

[tasks.fmt-check]
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy]
command = "cargo"
args = ["clippy", "--workspace", "--all-targets", "--all-features", "--", "-D", "warnings", "-W", "clippy::all", "-W", "clippy::dbg_macro"]

[tasks.deny]
command = "cargo"
args = ["deny", "--all-features", "check"]

[tasks.ci-check]
run_task = { name = ["check", "check-native", "check-wasm", "test", "fmt-check", "clippy", "deny"] }

[tasks.fix]
command = "cargo"
args = ["clippy", "--workspace", "--all-targets", "--all-features", "--fix", "--allow-dirty", "--allow-staged", "-Z", "unstable-options", "--", "-D", "warnings", "-W", "clippy::all"]
dependencies = ["fmt"]

[tasks.fixfmt]
run_task = { name = ["fix", "fmt"] }

[tasks.fmt]
command = "cargo"
args = ["fmt", "--all"]

[tasks.debugdump]
script = '''
cargo run -p desk-client --features debugdump,native
cat target/schedule_graph.dot | dot -LC10 -Tsvg > target/schedule_graph.svg
'''

[tasks.docker-build-server]
script = '''
DOCKER_BUILDKIT=1 docker build . -f .deploy/desk-server/Dockerfile -t gcr.io/hihaheho/desk-server:latest
'''

[tasks.e2e]
command = "cargo"
args = ["test", "-p", "desk-test-server"]

[config]
default_to_workspace = false
